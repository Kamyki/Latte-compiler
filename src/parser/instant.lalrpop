use std::str::FromStr;
use crate::model::ast::*;
use super::{wrap_in_block, new_spanned};
use crate::error_handling::Error;
use crate::error_handling::FrontendError::*;
use lalrpop_util::ParseError;

grammar<'err>(errors: &'err mut Vec<Error>);

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Colon<T>: Vec<T> = {
    <v:(<T> ";")*> => v,
};

Tier<Op,NextTier>: Expr = {
    <ls: @L> <l: Tier<Op,NextTier>> <o:Op> <r: NextTier> <rs: @R> => new_spanned(ls, IExpr::Binary{o: o, l: Box::new(l), r: Box::new(r) }, rs),
    NextTier
};

pub program: Program = {
    top_def* => Program {defs: <> },
}

top_def: TopDef  = {
    function => TopDef::Function(<>),
    class => TopDef::Class(<>),
    <@L> ! <@R> =>? {
        errors.extend(ParsingError.add_done((<>), "Invalid top definition"));
        Err(ParseError::User { error: "parsing error" })
    }
}

class: Class = {
    <l: @L> "class" <id: identifier> "{" <class_fields: classField*> "}" <r: @R> => {
        let mut fields = vec![];
        let mut methods = vec![];
        for d in class_fields {
            match d {
                ClassField::Field(f) => fields.push(f),
                ClassField::Method(m) => methods.push(m)
            }
        }
        Class {id, fields, methods, span: (l,r), super_class: None}
    },
    <l: @L> "class" <id: identifier> "extends" <id2:identifier> "{" <class_fields: classField*> "}" <r: @R> => {
        let mut fields = vec![];
        let mut methods = vec![];
        for d in class_fields {
            match d {
                ClassField::Field(f) => fields.push(f),
                ClassField::Method(m) => methods.push(m)
            }
        }
        Class {id, fields, methods, span: (l,r), super_class: Some(id2)}
    },
}

function: Function ={
    <l: @L> <ret_type: cType> <id: identifier> "(" <args: args> ")" <block: block> <r: @R> => Function {ret_type, id, args, block, span: (l,r)},
}

classField: ClassField =  {
    <arg> ";" => ClassField::Field(<>),
    function => ClassField::Method(<>)
}

arg: Arg = {
    <t:cType> <i:identifier> => Arg(<>),
}

fields = Colon<arg>;
args = Comma<arg>;

block: Block  = {
    <l: @L> "{" <stmts: stmt*> "}" <r: @R> => Block {stmts, span: (l,r)}
}

stmt: Stmt = {
    open_stmt,
    closed_stmt,
}

open_stmt: Stmt = {
    <l: @L> "if" "(" <c:expr> ")" <if_true:stmt>  <r: @R> => new_spanned(l, IStmt::Cond {c, if_true: wrap_in_block(if_true)}, r),
    <l: @L> "if" "(" <c:expr> ")" <if_true:closed_stmt> "else" <if_false:open_stmt>  <r: @R> => new_spanned(l, IStmt::CondElse {c, if_true: wrap_in_block(if_true), if_false:wrap_in_block(if_false)}, r),
    <l: @L> "while" "(" <c:expr> ")" <while_true:open_stmt>  <r: @R> => new_spanned(l, IStmt::While {c, while_true: wrap_in_block(while_true)}, r),
}

closed_stmt: Stmt = {
    <l: @L> ";"  <r: @R> => new_spanned(l, IStmt::Empty, r),
    <l: @L> <b: block>  <r: @R> => new_spanned(l, IStmt::Block(b), r),
    <l: @L> <t:cType> <items:items> ";"  <r: @R> => new_spanned(l, IStmt::Decl {t, items}, r),
    <l: @L> <i: target> "=" <e: expr> ";"  <r: @R> => new_spanned(l, IStmt::Asg {i, e}, r),
    <l: @L> <i: target> "++" ";"  <r: @R> => new_spanned(l, IStmt::Incr(i), r),
    <l: @L> <i: target> "--" ";"  <r: @R> => new_spanned(l, IStmt::Decr(i), r),
    <l: @L> "return" <e: expr> ";"  <r: @R> => new_spanned(l, IStmt::Ret(e), r),
    <l: @L> "return" ";"  <r: @R> => new_spanned(l, IStmt::VRet, r),
    <l: @L> "if" "(" <c:expr> ")" <if_true:closed_stmt> "else" <if_false:closed_stmt>  <r: @R> => {
            new_spanned(l, IStmt::CondElse {c, if_true: wrap_in_block(if_true), if_false: wrap_in_block(if_false)},r)
        },
    <l: @L> "while" "(" <c:expr> ")" <while_true: closed_stmt>  <r: @R> => new_spanned(l, IStmt::While {c , while_true: wrap_in_block(while_true) }, r),
    <l: @L> <e: expr> ";" <r: @R> => new_spanned(l, IStmt::Expr(e), r),
    <l: @L> <e:!> <r: @R> =>? {
        if let ParseError::UnrecognizedToken{token: (a, _, b), ..} = e.error {
            errors.extend(ParsingError.add_done((a,b), "Unexpected token found here"));
        } else {
            errors.extend(ParsingError.add_done((r, r), "Unrecognizable statement starts here"));
        }
        Err(ParseError::User { error: "parsing error" })
    }
}

target: Target = {
     <l: @L> <i: identifier> <r: @R> => Target::Id(i),
     <l: @L> <f: field>  <r: @R> => Target::Field(f),
}

cType: Type = {
    <l: @L> "int" <r: @R> => new_spanned(l, IType::Int, r),
    <l: @L> "string" <r: @R> => new_spanned(l, IType::String, r),
    <l: @L> "boolean" <r: @R> => new_spanned(l, IType::Boolean, r),
    <l: @L> "void" <r: @R> => new_spanned(l, IType::Void, r),
    <l: @L> <id: type_name> <r: @R> => new_spanned(l, IType::Class(id.item), r),
}

item: Item = {
    <identifier> => Item::NoInit(<>),
    <i:identifier> "=" <e:expr> => Item::Init {<>},
}
items: Vec<Item> = {
     <v:(<item> ",")*> <e:item> => {
        let mut v = v;
        v.push(e);
        v
    }
}

expr = expr0;

expr0 = Tier<logicOr, expr1>;
expr1 = Tier<logicAnd, expr2>;
expr2 = Tier<relOp, expr3>;
expr3 = Tier<addOp, expr4>;
expr4 = Tier<mulOp, expr5>;

expr5: Expr = {
    <l: @L> <o:unOp> <e:expr5>  <r: @R> => new_spanned(l, IExpr::Unary {o, e: Box::new(e)}, r),
    expr6,
}

expr6: Expr = {
    <l: @L> <t: expr9>  <e: expr6> <r: @R> =>? {
        if let IExpr::Paren(e_p) = t.item {
            if let IExpr::Var(id) = e_p.item {
                return Ok(new_spanned(l, IExpr::Cast {t: Type {item: IType::Class(id.item), span: id.span.clone()}, e: Box::new(e)}, r))
            }
        }
        errors.extend(ParsingError.add_done((l, r), "Invalid casting syntax"));
        Err(ParseError::User { error: "parsing error" })
    },
    expr7,
}

expr7: Expr = {

    <l: @L> <f: field> <r: @R> => new_spanned(l, IExpr::Field(f), r),
    <l: @L> "new" <t: cType> <r: @R> => new_spanned(l, IExpr::Object(t), r),
    <l: @L>  <name: target> "(" <args: exprs> ")"  <r: @R> => new_spanned(l, IExpr::FunCall {name, args}, r),
    expr8
}

expr8: Expr = {
    <l: @L> <i: identifier> <r: @R> => new_spanned(l, IExpr::Var(i), r),
    @L nullLiteral @R => new_spanned(<>),
    @L intLiteral @R => new_spanned(<>),
    @L boolLiteral @R => new_spanned(<>),
    @L strLiteral @R => new_spanned(<>),
    expr9
}

expr9: Expr = {
    <l: @L> "(" <e: expr> ")" <r: @R> => new_spanned(l, IExpr::Paren(Box::new(e)), r),
}

exprs = Comma<expr>;

field: Field = {
    <e: expr7> "." <id: identifier> => Field {e: Box::new(e), id}
}

strLiteral: IExpr = {
    <string> => IExpr::String(<>),
}

intLiteral: IExpr = {
    <integer> => IExpr::Int(<>),
}

boolLiteral: IExpr = {
    "true" => IExpr::Bool(true),
    "false" => IExpr::Bool(false),
}

nullLiteral: IExpr = {
    "null" => IExpr::Null,
}

logicOr: BinOp = {
    <l: @L> "||" <r: @R> => new_spanned(l, IBinOp::Or, r)
}

logicAnd: BinOp = {
    <l: @L> "&&" <r: @R> => new_spanned(l, IBinOp::And, r)
}

relOp: BinOp = {
    <l: @L> "<" <r: @R> => new_spanned(l, IBinOp::LT, r),
    <l: @L> "<=" <r: @R> => new_spanned(l, IBinOp::LE, r),
    <l: @L> ">"  <r: @R> => new_spanned(l, IBinOp::GT, r),
    <l: @L> ">=" <r: @R> => new_spanned(l, IBinOp::GE, r),
    <l: @L> "==" <r: @R> => new_spanned(l, IBinOp::EQ, r),
    <l: @L> "!=" <r: @R> => new_spanned(l, IBinOp::NE, r),
}

addOp: BinOp = {
    <l: @L> "+" <r: @R> => new_spanned(l, IBinOp::Add, r),
    <l: @L> "-" <r: @R> => new_spanned(l, IBinOp::Sub, r),
};

mulOp: BinOp = {
    <l: @L> "*" <r: @R> => new_spanned(l, IBinOp::Mul, r),
    <l: @L> "/" <r: @R> => new_spanned(l, IBinOp::Div, r),
    <l: @L> "%" <r: @R> => new_spanned(l, IBinOp::Mod, r),
};

unOp: UnOp = {
    "-" => UnOp::IntNegation,
    "!" => UnOp::BoolNegation
}

integer: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap(),
};

identifier: Id = {
    <l: @L> <i: r"[a-zA-Z][a-zA-Z0-9_]*">  <r: @R> =>  new_spanned(l, i.to_string(), r),
};

type_name: Id = {
    identifier
}

string: String = {
    <s: r#""[^"]*""#> => s[1..s.len()-1].to_string()
}